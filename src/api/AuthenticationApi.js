/**
 * National Digital Identity (NDI) - ASP API
 * This is the API store where you can discover everything about integrating with the National Digital Identity (NDI) platform. To try out the API, first go to the token endpoint section to learn how to obtain an access token to access the API.  # Release Notes   * 0.3.2 (Release Date)     * Initial release of API  # Overview   The Authentication Service Provider (ASP) is a key component of the NDI platform which performs authentication and authorization.  Client apps accessing resources (API, data) in protected domains (e.g. Government agency, bank systems) may invoke the ASP to authenticate the end-user and obtain the access tokens to access the protected resources.   Client apps invoke the ASP through an interface and interaction flows based on the widely supported OpenID Connect (OIDC) specifications.   The ASP can be federated - it may be run and operated independently from the Government NDI cluster, e.g. a financial institution may run an instance of ASP on its platform to serve the needs of its applications.   <br><br>    The ASP may be operated in the 2 modes - as an OIDC Provider, or as a pure-play authenticator.  The operating modes will decide how relying parties (i.e. the client app) and the Authorization Server of the federated site interact with the ASP.  In both modes, the ASP is only responsible for authenticating the user and generates the ID token, it is the organization's Authorization Server which determines whether the relying party and the   user are authorized to access its protected resources and issues the access token accordingly.    ## Mode 1: ASP as an OpenID Connect Provider    <img style=\"width:50%; margin-left:auto; margin-right:auto; display:block\" src=\"../img/openIDProvider.png\"/>    The ASP acts as an OIDC Provider, handling the OIDC flow with the relying party.  This operating mode is useful for organizations which are planning to expose their capabilities through API and may not have a OAuth 2.0/OIDC enabled Authorization Server.  During the OIDC flow, the ASP performs user authentication with the user's NDI form factor, on successful authentication, it calls the organization's Authorization Server to obtain an access token.  The Authorization Server determines whether the relying party and user has proper access (based on the organization's access policy) and generates the access token accordingly.  The ASP returns the access token to the relying party which may then use it to access protected resources.   <br><br>   In this operating mode, the ASP integrates with the Authorization Server of the organization through the Domain Authorization Interface.    ## Mode 2: ASP as an Authenticator     <img style=\"width:50%; margin-left:auto; margin-right:auto; display:block\" src=\"../img/authenticator.png\"/>    The ASP acts as an authenticator service which the Authorization Server calls to perform user authentication with the user's NDI form factor.  This operation mode is applicable for organizations which are already offering OAuth 2.0 or OIDC based authorization to relying parties accessing their protected resources.  In this scenario, organizations typically use an Authorization Server (or IAM) module to handle the OAuth 2.0/OIDC flows with relying parties.  During the OAuth 2.0/OIDC flow, the Authorization Server module calls the ASP authentication API to perform user authentication with the user's NDI form factor.  On successful user authentication, the Authorization Server determines whether the relying party and user have the proper access (based on the organization's access policies), then generates and returns an access token to the relying party which it uses to access protected resources.   <br><br>   In this operating mode, the Authorization Server of the organization will integrate with the ASP through the ASP Authentication API. 
 *
 * OpenAPI spec version: 0.3.2
 * Contact: ndi_support@ndi.gov.sg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ERRORUNKNOWN'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ERRORUNKNOWN'));
  } else {
    // Browser globals (root is window)
    if (!root.NationalDigitalIdentityNdiAspApi) {
      root.NationalDigitalIdentityNdiAspApi = {};
    }
    root.NationalDigitalIdentityNdiAspApi.AuthenticationApi = factory(root.NationalDigitalIdentityNdiAspApi.ApiClient, root.NationalDigitalIdentityNdiAspApi.ERRORUNKNOWN);
  }
}(this, function(ApiClient, ERRORUNKNOWN) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 0.3.2
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the initiateAuth operation.
     * @callback module:api/AuthenticationApi~initiateAuthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate user authentication or authorization (GET)
     * OIDC authorization endpoint. The client call this endpoint to start the OIDC flow.  The ODIC flow consists of both user authentication and authorization.  The authorization endpoint performs the user authentication part of the OIDC flow, resulting in an authorization code given to the calling client which it use to call the token endpoint to continue with the authorization part of the OIDC flow.&lt;br&gt;&lt;br&gt; These are the different ways the client may interact with the ASP to carry out user authentication: &lt;br&gt;  1. Use the standard NDI Login page for user authentication.  The client redirects the user agent to this endpoint, which returns the NDI Login page for the user to enter his credentials for authentication.  In the case of NDI ASP, the login consists only the user id input (i.e. no password input) for the user enter his NDI id. The NDI Login page then interacts with the ASP to initiate user authentication. The ASP routes sends an authentication challenge to the user&#39;s form factor (e.g. the soft token on his mobile device) via the appropriate form factor authentication servce. For mobile soft token, the user is notified to enter his PIN in the NDI App to unlock the soft token to sign on the authentication challenge.  &lt;br&gt;&lt;br&gt; 2. The client uses its own login page to capture the user NDI id, and calls this endpoint passing-on the NDI id. Similar to point 1, The ASP routes also sends an authentication challenge to the user&#39;s form factor (e.g. the soft token on his mobile device) via the appropriate form factor authentication servce. For mobile soft token, the user is notified to enter his PIN in the NDI App to unlock the soft token to sign on the authentication challenge. &lt;br&gt;&lt;br&gt; 3. Use QR code.  The client calls this endpoint to request for a QR code which encodes the authentication challenge, it then displays on its login page to let the user scan with his NDI App. The NDI App will then let the user enter his PIN to unlock the soft token to sign on the authentication challenge. &lt;br&gt;&lt;br&gt; 4. If the client is a trusted mobile app, it may interact with the NDI App through the NDI mobile SDK, which calls this endpoint to obtain an authentication challenge.  The NDI App let the user enter his PIN to unlock the soft token to sign on the authentication challenge. &lt;br&gt;&lt;br&gt;  The NDI App returns the signed response generated by the mobile soft token to the ASP (through the ASP callback uri) which verifies the signature on the signed response with the user&#39;s certificate.  If all is well, the ASP generates an authorization code and sends it to the client via the client&#39;s redirect uri.  The client may then proceed with the authorization part of the OIDC flow by calling the ASP token endpoint to exchange for the security tokens (i.e. id token and access token) using the authorization code in accordance to the authorization code grant flow.
     * @param {module:model/ERRORUNKNOWN} clientId The client id of the calling client app.
     * @param {module:model/ERRORUNKNOWN} nonce A random unqiue reference generated by the client, which will be included in the ID token returned by the ASP on successful user authentication. The client may use this to tie the ID token to a particular authenticated session.
     * @param {Object} opts Optional parameters
     * @param {module:model/ERRORUNKNOWN} opts.scope The scope of access requested for, this is a string of space- delimited references representing protected resources;
     * @param {module:model/ERRORUNKNOWN} opts.responseType The response type, may be code or idtoken. Default to code if not specified.
     * @param {module:model/ERRORUNKNOWN} opts.state The random string generated by the client to counter CSRF, if specified, the ASP will include it as part of the redirect url when returning the authorization code to the client&#39;s redirect uri.  The client is to match the value of the state returned with its copy to ensure the redirect is from the ASP.
     * @param {module:model/ERRORUNKNOWN} opts.acrValues {Description to be added}
     * @param {module:model/ERRORUNKNOWN} opts.ndiId {Description to be added}
     * @param {module:model/ERRORUNKNOWN} opts.prompt {Description to be added}
     * @param {module:model/ERRORUNKNOWN} opts.display {Description to be added}
     * @param {module:api/AuthenticationApi~initiateAuthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.initiateAuth = function(clientId, nonce, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling initiateAuth");
      }

      // verify the required parameter 'nonce' is set
      if (nonce === undefined || nonce === null) {
        throw new Error("Missing the required parameter 'nonce' when calling initiateAuth");
      }


      var pathParams = {
      };
      var queryParams = {
        'client_id': clientId,
        'nonce': nonce,
        'scope': opts['scope'],
        'response_type': opts['responseType'],
        'state': opts['state'],
        'acr_values': opts['acrValues'],
        'ndi_id': opts['ndiId'],
        'prompt': opts['prompt'],
        'display': opts['display'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/asp/auth', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateQRAuth operation.
     * @callback module:api/AuthenticationApi~initiateQRAuthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * QR Code Authentication
     * This is the callback endpoint called by the form factor (or form factor authenticator service) to return the signed response to the originating ASP of the authentication challenge.  This is for FF authentication based on QR code.
     * @param {module:api/AuthenticationApi~initiateQRAuthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.initiateQRAuth = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/asp/responses/qrcodes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the responses operation.
     * @callback module:api/AuthenticationApi~responsesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Callback endpoint called by form factor
     * This is the callback endpoint called by the form factor (or form factor authenticator service) to return the signed response to the originating ASP of the authentication challenge. &lt;br/&gt;&lt;br/&gt;
     * @param {module:api/AuthenticationApi~responsesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.responses = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/asp/responses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AspAuthLoginPost operation.
     * @callback module:api/AuthenticationApi~v1AspAuthLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint called by the NDI Login page
     * This endpoint is called by the NDI Login page when the user click the OK button, passing over the user NDI id.  This will initiate user authentication by sending an authentication challenge (via the form factor authenticator service) to the user&#39;s form factor.
     * @param {module:api/AuthenticationApi~v1AspAuthLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AspAuthLoginPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/asp/auth/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
