/**
 * National Digital Identity (NDI) - ASP API
 * This is the API store where you can discover everything about integrating with the National Digital Identity (NDI) platform. To try out the API, first go to the token endpoint section to learn how to obtain an access token to access the API.  # Release Notes   * 0.3.2 (Release Date)     * Initial release of API  # Overview   The Authentication Service Provider (ASP) is a key component of the NDI platform which performs authentication and authorization.  Client apps accessing resources (API, data) in protected domains (e.g. Government agency, bank systems) may invoke the ASP to authenticate the end-user and obtain the access tokens to access the protected resources.   Client apps invoke the ASP through an interface and interaction flows based on the widely supported OpenID Connect (OIDC) specifications.   The ASP can be federated - it may be run and operated independently from the Government NDI cluster, e.g. a financial institution may run an instance of ASP on its platform to serve the needs of its applications.   <br><br>    The ASP may be operated in the 2 modes - as an OIDC Provider, or as a pure-play authenticator.  The operating modes will decide how relying parties (i.e. the client app) and the Authorization Server of the federated site interact with the ASP.  In both modes, the ASP is only responsible for authenticating the user and generates the ID token, it is the organization's Authorization Server which determines whether the relying party and the   user are authorized to access its protected resources and issues the access token accordingly.    ## Mode 1: ASP as an OpenID Connect Provider    <img style=\"width:50%; margin-left:auto; margin-right:auto; display:block\" src=\"../img/openIDProvider.png\"/>    The ASP acts as an OIDC Provider, handling the OIDC flow with the relying party.  This operating mode is useful for organizations which are planning to expose their capabilities through API and may not have a OAuth 2.0/OIDC enabled Authorization Server.  During the OIDC flow, the ASP performs user authentication with the user's NDI form factor, on successful authentication, it calls the organization's Authorization Server to obtain an access token.  The Authorization Server determines whether the relying party and user has proper access (based on the organization's access policy) and generates the access token accordingly.  The ASP returns the access token to the relying party which may then use it to access protected resources.   <br><br>   In this operating mode, the ASP integrates with the Authorization Server of the organization through the Domain Authorization Interface.    ## Mode 2: ASP as an Authenticator     <img style=\"width:50%; margin-left:auto; margin-right:auto; display:block\" src=\"../img/authenticator.png\"/>    The ASP acts as an authenticator service which the Authorization Server calls to perform user authentication with the user's NDI form factor.  This operation mode is applicable for organizations which are already offering OAuth 2.0 or OIDC based authorization to relying parties accessing their protected resources.  In this scenario, organizations typically use an Authorization Server (or IAM) module to handle the OAuth 2.0/OIDC flows with relying parties.  During the OAuth 2.0/OIDC flow, the Authorization Server module calls the ASP authentication API to perform user authentication with the user's NDI form factor.  On successful user authentication, the Authorization Server determines whether the relying party and user have the proper access (based on the organization's access policies), then generates and returns an access token to the relying party which it uses to access protected resources.   <br><br>   In this operating mode, the Authorization Server of the organization will integrate with the ASP through the ASP Authentication API. 
 *
 * OpenAPI spec version: 0.3.2
 * Contact: ndi_support@ndi.gov.sg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.NationalDigitalIdentityNdiAspApi) {
      root.NationalDigitalIdentityNdiAspApi = {};
    }
    root.NationalDigitalIdentityNdiAspApi.CertificatesTokenConfigurationsApi = factory(root.NationalDigitalIdentityNdiAspApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * CertificatesTokenConfigurations service.
   * @module api/CertificatesTokenConfigurationsApi
   * @version 0.3.2
   */

  /**
   * Constructs a new CertificatesTokenConfigurationsApi. 
   * @alias module:api/CertificatesTokenConfigurationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getJwks operation.
     * @callback module:api/CertificatesTokenConfigurationsApi~getJwksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the JWK Set containing the ASP signing keys.
     * Get the JSON Web Key (JWK) Set containing the signing keys of this ASP. The signing keys (i.e. public keys) are used by the form factor local agent (or the form factor authenticator) to verify the signed challenges sent by the ASP. The signing key to use for verification is indicated by the kid value in the header of the signed challenge JWS. The JWK set is to be downloaded periodically as the ASP refreshes its signing keys regularly.
     * @param {module:api/CertificatesTokenConfigurationsApi~getJwksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getJwks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/asp/certs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpenidConfig operation.
     * @callback module:api/CertificatesTokenConfigurationsApi~getOpenidConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OpenID Connect Discovery document of this ASP
     * Get the OpenID Connect discovery document of this ASP. The discovery document is downloaded by relying parties to find out the onfiguration of and capabilities supported by the ASP e.g. authorization url, token url, etc.  Relying parties should download the discovery document periodically as ASP configuration may change from time to time. Response: the response body contains the discovery document.
     * @param {module:api/CertificatesTokenConfigurationsApi~getOpenidConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getOpenidConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/asp/.well-known/openid-configuration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AspTokenPost operation.
     * @callback module:api/CertificatesTokenConfigurationsApi~v1AspTokenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange for the security tokens (ID token and access token) with the authorization code obtained from the authorization endpoint.
     * OAuth2.0 token endpoint. Your client app calls this endpoint to exchange for the security tokens (ID token and access token) with the authorization code obtained from the authorization endpoint after a successful user authetication/authorization. 
     * @param {module:api/CertificatesTokenConfigurationsApi~v1AspTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AspTokenPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/asp/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
